/*
 * vim: set ft=rust:
 * vim: set ft=reason:
 */
open Core.Std;

module Dep = Jenga_lib.Api.Dep;

module Path = Jenga_lib.Api.Path;

module Rule = Jenga_lib.Api.Rule;

module Action = Jenga_lib.Api.Action;

module Scheme = Jenga_lib.Api.Scheme;

open Utils;

/* See comment in the `sprintf` */
let dotMerlinScheme ::isTopLevelLib ::libName ::dir ::bscBackend => {
  let dotMerlinPath = rel ::dir ".merlin";
  let thirdPartyNpmLibs = NpmDep.getThirdPartyNpmLibs libDir::dir;

  /** Bucklescript Specific stuff **/
  /* TODO change absolute path to relative path once merlin supports relative paths for flags */
  let bsBuildArtifactsPath =
    Path.reach_from ::dir (rel dir::nodeModulesRoot "bs-platform/lib/ocaml");
  let bucklescriptBuildArtifacts =
    bscBackend ? "# Bucklescript build artifacts\nB " ^ bsBuildArtifactsPath : "";

  /** Only include thirdPartyNpmLibs whose sources are rebel compatible **/
  let thirdPartyNpmMerlinSources =
    thirdPartyNpmLibs |>
    List.map
      f::(
        fun libName =>
          "S " ^ Path.reach_from ::dir (rel dir::(rel dir::nodeModulesRoot (tsl libName)) "src")
      ) |>
    String.concat sep::"\n";
  /* Unused purposefully, because we're not generating .merlin files inside node_modules until esy will allow it. */
  /* let thirdPartyNpmMerlinDeps = */
  /*   thirdPartyNpmLibs |> */
  /*   List.map f::(fun libName => relD dir::(rel dir::nodeModulesRoot (tsl libName)) ".merlin"); */

  /** thirdParty Ocamlfind libs  */
  let ocamlfindPkgs =
    switch (NpmDep.getThirdPartyOcamlfindLibs libDir::dir) {
    | [] => ""
    | _ as ls => "PKG " ^ (ls |> List.map f::tsl |> String.concat sep::" ")
    };

  /**  Build Artifacts for targets */
  let buildArtifacts =
    rebelConfig.targets |>
    List.map
      f::(fun target => "B " ^ Path.reach_from ::dir (rel dir::(rel dir::build target.target) "*")) |>
    String.concat sep::"\n";

  /** If toplevel open all the target's modules alias other open the current library's module alias */
  let openFlag =
    (
      isTopLevelLib ?
        {
          let targetModuleAlias target => tsm (libToModule @@ Lib (target.target ^ "_Tar"));
          List.map rebelConfig.targets f::(fun target => "-open " ^ targetModuleAlias target)
        } :
        ["-open " ^ tsm (libToModule libName)]
    ) |>
    String.concat sep::" ";
  let findWhereBsppxIs =
    Dep.map
      (which "bsppx.exe")
      (
        fun bsppxAbsolutePath => {
          let previousContents = readFile path::dotMerlinPath;

          /** Read the existing custom config **/
          let customConfig =
            switch previousContents {
            | "" => ""
            | _ =>
              String.split_lines previousContents |>
              /* Drop all lines till this particular line */
              List.drop_while f::(fun s => s != "# User Custom config here") |>
              /* Drop this particular line */
              List.drop_while f::(fun s => s == "# User Custom config here") |>
              String.concat sep::"\n"
            };
          let dotMerlinContent =
            Printf.sprintf
              {| # DO NOT EDIT THIS SECTION. CUSTOM CONFIG GOES BELOW
# This file is autogenerated for
# [Merlin](https://github.com/the-lambda-church/merlin), a static analyser for
# OCaml that provides autocompletion, jump-to-location, recoverable syntax
# errors, type errors detection, etc., that your editor can use. To activate it,
# one usually provides a .merlin file at the Path.the_root of a project, describing where
# the sources and artifacts are. Since we dictated the project structure, we can
# auto generate .merlin files!

# S is the merlin flag for source files
%s

# Include all the third-party sources too. You might notice that we've put a
# .merlin into each node_modules package. This is subtle; in short, it's to make
# jump-to-location work correctly in conjunction with our build & namespacing
# setup, when you jump into a third-party file.
%s

# B stands for build (artifacts). We generate ours into _build
%s

%s

# PKG lists packages found through ocamlfind (aka findlib), a tool for finding
# the location of third-party dependencies. For us, most of our third-party deps
# reside in `node_modules/` (made visible to Merlin through the S command
# above); this PKG command is for discovering the opam/ocamlfind packages.
%s

# FLG is the set of flags to pass to Merlin, as if it used ocamlc to compile and
# understand our sources. You don't have to understand what these flags are for
# now; but if you're curious, go check the rebel.ml that generated this
# .merlin at https://github.com/reasonml/rebel
FLG -w -30 -w -40 %s

%s

# User Custom config here
%s
        |}
              (isTopLevelLib ? "S src" : "")
              thirdPartyNpmMerlinSources
              buildArtifacts
              bucklescriptBuildArtifacts
              ocamlfindPkgs
              openFlag
              (bscBackend ? "FLG -ppx " ^ bsppxAbsolutePath : "")
              customConfig;
          Action.save dotMerlinContent target::dotMerlinPath
        }
      );
  Scheme.rules [Rule.create targets::[dotMerlinPath] findWhereBsppxIs]
};

let scheme ::dir => {
  let bscBackend =
    List.exists rebelConfig.targets f::(fun target => target.engine == "bucklescript");
  /* We generate many .merlin files, one per third-party library (and on at the top). Additionally, this is
     the only case where we generate some artifacts outside of _build/. Most of this is so that Merlin's
     jump-to-location could work correctly when we jump into a third-party source file. As to why exactly we
     generate .merlin with the content that it is, call 1-800-chenglou-plz-help. */
  if (dir == Path.the_root) {
    let toplevelScheme =
      /* libName here is computer inside the function for various targets */
      dotMerlinScheme isTopLevelLib::true ::dir libName::(Lib "") ::bscBackend;
    Scheme.all [
      Scheme.rules [Rule.default ::dir [relD dir::Path.the_root ".merlin"]],
      toplevelScheme
    ]
  } else if (
    Path.dirname dir == nodeModulesRoot
  ) {
    /**
     * Those are commented out because when running `rebel` inside an `esy` sandbox we're not allowed to inject .merlin files in node_modules.
     */
    /* let libName = Lib (Path.basename dir); */
    /* dotMerlinScheme isTopLevelLib::false ::dir ::libName ::bscBackend */
    Scheme.no_rules
  } else {
    Scheme.no_rules
  }
};
